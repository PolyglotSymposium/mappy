if = \cond (then) (else) -> [[
  default-take [take :truthy cond] (:false else) then
]]

true = (:truthy :true)
false = (:truthy :false)

equal? = \a b -> [default-take a (b true) false]

not = \v -> [if v [give :truthy :false v] [give :truthy :true v]]

empty? = \map -> [default-take map (() true) false]

zero = ()

succ = \num -> [give :pred num ()]

pred = \num -> [take :pred num]

add = \a b -> [
  if [empty? a]
    b
    [succ [add [pred a] b]]
]

two = [succ [succ zero]]

identity = \a -> a

nil = ()

cons = \value list -> (:head value :tail list)

apply = \fn v -> [fn v]

assert = \c a b -> [if c :pass :fail]

map = \f xs -> [
  if [empty? xs]
    nil
    [cons [f [take :head xs]] [map f [take :tail xs]]]
]

silly-list = [cons :a [cons :b nil]]

silly-fn = \v -> [take v (:a :c :b :d)]
expected-map = [cons :c [cons :d nil]]

main =
  (:equal-for-keywords [assert [equal? :foo :foo]]
   :equal-for-equal-maps [assert [equal? two two]]
   :equal-for-non-equal-maps [assert [not [equal? zero two]]]
   :equal-for-functions [assert [equal? apply apply]]
   :cons-works [assert [equal? [cons :foo nil] (:head :foo :tail ())]]
   :add-works-for-trivial-case [assert [equal? [add zero two] two]]
   :add-works-for-harder-case [assert [equal? [add two two] [succ [succ two]]]]
   :first-class-functions [assert [equal? [apply identity :foo] :foo]]
   :map-for-trivial-case [assert [equal? [map identity silly-list] silly-list]]
   :map-for-harder-case [assert [equal? [map silly-fn silly-list] expected-map]]
)
