if cond (then) (else) = [[
  default-take [take :truthy cond] (:false else) then
]]

cond cases = [[
  take true cases
]]

true = (:truthy :true)
false = (:truthy :false)

or a (b) = [if a a [b]]

and a (b) = [if a [b] false]

equal? a b = [default-take a (b true) false]

not v = [if v [give :truthy :false v] [give :truthy :true v]]

key? k map = [not [equal? map [default-take k map map]]]

mod k f map = [
  if
    [key? k map]
    [give k [f [take k map]] map]
    map
]

empty? map = [default-take map (() true) false]

zero = ()

succ num = [give :pred num ()]

pred num = [take :pred num]

add a b = [
  if [empty? a]
    b
    [succ [add [pred a] b]]
]

inc v = [
  if [equal? -1 v]
    0
    [[
      [:__type v]
      (
        :zero         \ -> 1
        :positive-int \ -> (:__type :positive-int :value [succ [:value v]])
        :negative-int \ -> (:__type :negative-int :value [pred [:value v]])
      )
    ]]
]

dec v = [
  if [equal? 1 v]
    0
    [[
      [:__type v]
      (
        :zero         \ -> -1
        :positive-int \ -> (:__type :positive-int :value [pred [:value v]])
        :negative-int \ -> (:__type :negative-int :value [succ [:value v]])
      )
    ]]
]

+ a b =
  [[
    take
    ([:__type a] [:__type b])
    (
      (:positive-int :positive-int) \ -> (:__type :positive-int :value [add [:value a] [:value b]])
      (:negative-int :positive-int) \ -> [+ [inc a] [dec b]]
      (:negative-int :negative-int) \ -> (:__type :negative-int :value [add [:value a] [:value b]])
      (:positive-int :negative-int) \ -> [+ [dec a] [inc b]]
      (:zero :positive-int)         \ -> b
      (:zero :negative-int)         \ -> b
      (:positive-int :zero)         \ -> a
      (:negative-int :zero)         \ -> a
      (:zero :zero)                 \ -> 0
    )
  ]]

* a b =
  [[
    take
    ([:__type a] [:__type b])
    (
      (:positive-int :positive-int) \ -> (:__type :positive-int :value [mult [:value a] [:value b]])
      (:negative-int :positive-int) \ -> (:__type :negative-int :value [mult [:value a] [:value b]])
      (:negative-int :negative-int) \ -> (:__type :positive-int :value [mult [:value a] [:value b]])
      (:positive-int :negative-int) \ -> (:__type :negative-int :value [mult [:value a] [:value b]])
      (:zero :positive-int)         \ -> 0
      (:zero :negative-int)         \ -> 0
      (:positive-int :zero)         \ -> 0
      (:negative-int :zero)         \ -> 0
      (:zero :zero)                 \ -> 0
    )
  ]]

mult a b = [
  if [elem? (|a b|) zero]
    zero
    [if [elem? (|a b|) one]
      [take one (a b b a)]
      [add a [mult a [pred b]]]]
]

digit-char->nat c = [
  take c (
    '0' zero,
    '1' one,
    '2' two,
    '3' three,
    '4' four,
    '5' [succ four],
    '6' [add three three],
    '7' [add four three],
    '8' [add four four],
    '9' [add four [succ four]]
  )
]

-- private
string->nat-aux str acc = [
  if [empty? str]
    acc
    [string->nat-aux
      [:tail str]
      [add
        [mult ten acc]
        [digit-char->nat [:head str]
      ]
    ]
  ]
]

string->nat str = [string->nat-aux str zero]

pow base exponent = [
  if [equal? zero exponent]
    one
    [mult base [pow base [pred exponent]]]
]

div dividend divisor = (
  :numerator dividend
  :denominator divisor
)

one = [succ zero]
two = [succ one]
three = [succ two]
four = [succ three]
ten = [mult two [succ four]]

identity a = a

const a _ = a

. f g = \x -> [f [g x]]

nil = ()

cons value list = (:head value :tail list)

deep-take keys structure = [
  if [empty? keys]
    structure
    [deep-take
      [:tail keys]
      [take [:head keys] structure]]
]

nothing = (
  :map \_ -> nothing
  :with-default identity
  :nothing? true
)

just v = (
  :map \f -> [just [f v]]
  :with-default [const v]
  :nothing? false
)

maybe-take key map =
  let
    result = [default-take key map (:wrap map)]
  in [
    if [equal? (:wrap map) result]
      nothing
      [just result]
  ]

-- length : list a -> nat
length values = [
  if [empty? values]
    zero
    [succ [length [:tail values]]]
]

-- elem? : list a -> a -> bool
elem? values a = [
  if [empty? values]
    false
    [if [equal? [:head values] a]
      true
      [elem? [:tail values] a]]
]

-- ++ : list a -> list a -> list a
++ as bs = [
  if [empty? as]
    bs
    [cons [:head as] [++ [:tail as] bs]]
]

-- concat : list (list a) -> list a
concat values = [
  if [empty? values]
    nil
    [++ [:head values] [concat [:tail values]]]
]

-- iterate-n : (a -> a) -> a -> nat -> list a
iterate-n f v n = [
  if [equal? n zero]
    nil
    [cons v [iterate-n f [f v] [pred n]]]
]

-- replicate : nat -> a -> list a
replicate n v = [
  if [equal? n zero]
    nil
    [cons v [replicate [pred n] v]]
]

-- prepend-all : a -> list a -> list a
prepend-all sep vs = [
  if [empty? vs]
    nil
    [cons sep [cons [:head vs] [prepend-all sep [:tail vs]]]]
]

-- intersperse : a -> list a -> list a
intersperse sep values =[
  if [empty? values]
    nil
    [cons [:head values] [prepend-all sep [:tail values]]]
]

-- intercalate : list a -> list (list a) -> list a
intercalate sep vs = [concat [intersperse sep vs]]

-- fold : (a -> b -> b) -> b -> list a -> b
fold f init vs = [
  if [empty? vs]
    init
    [f [:head vs] [fold f init [:tail vs]]]
]

-- private
reverse-into vs acc = [
  if [empty? vs]
    acc
    [reverse-into [:tail vs] [cons [:head vs] acc]]
]

-- reverse : list a -> list a
reverse vs = [reverse-into vs nil]

-- private
split-aux vs acc = [
  if [empty? vs]
    [if [empty? acc] nil (|[reverse acc]|)]
    let
      first = [:head vs]
      rest = [:tail vs]
    in [
      if [equal? delim first]
        [cons [reverse acc] [split-aux rest nil]]
        [split-aux rest [cons first acc]]
    ]
]

-- split : a -> list a -> list (list a)
split delim vs = [split-aux vs nil]

-- cons-stream : a -> stream a -> stream a
cons-stream value stream = \ -> (
  :value value
  :next stream
)

-- alternating-streams : stream a -> stream a -> stream a
alternating-streams stream1 stream2 =
   \ ->
  let
    current = [stream1]
  in (
    :value [:value current]
    :next [alternating-streams stream2 [:next current]]
  )

zip xs ys = [
  if [or [empty? xs] [empty? ys]]
    nil
    let
      x = [:head xs]
      y = [:head ys]
    in
      (:head (:fst x :snd y) :tail [zip [:tail xs] [:tail ys]])
]

-- zip-streams : stream a -> stream b -> stream (:fst a :snd b)
zip-streams stream1 stream2 =
   \ ->
  let
    s1 = [stream1]
    s2 = [stream2]
  in (
    :value (:fst [:value s1] :snd [:value s2])
    :next [zip-streams [:next s1] [:next s2]]
  )

-- map-stream : (a -> b) -> stream a -> stream b
map-stream f stream =
  \ -> let
    current = [stream]
  in
    (
      :value [f [:value current]]
      :next [map-stream f [:next current]]
    )

-- filter-stream : (a -> bool) -> stream a -> stream a
filter-stream p? stream =
  let
    current = [stream]
    value = [:value current]
    next = [:next current]
  in
    [
      if [p? value]
      \ -> (
        :value value
        :next [filter-stream p? next]
      )
      [filter-stream p? next]
    ]

-- head-while : (a -> bool) -> stream a -> list a
head-while p? stream =
  let
    current = [stream]
    value = [:value current]
  in
    [
      if [p? value]
        [cons value [head-while p? [:next current]]]
        nil
    ]

-- repeat : a -> stream a
repeat v = \ -> (
  :value v
  :next [repeat v]
)

-- private
cycle-aux vs values = [
  if [empty? vs]
    [cycle-aux values values]
    \ -> (
      :value [:head vs]
      :next [cycle-aux [:tail vs] values]
    )
]

cycle values = [cycle-aux values values]

-- first-n : nat -> stream a -> list a
first-n n stream = [
  if [equal? zero n]
    nil
    let
      unboxed = [stream]
    in
      [cons [:value unboxed] [first-n [pred n] [:next unboxed]]]
]

-- drop-n : nat -> stream a -> stream a
drop-n n stream = [
  if [equal? zero n]
    stream
    [drop-n [pred n] [:next [stream]]]
]

-- iterate : (a -> a) -> a -> stream a
iterate f v = \ -> (
  :value v
  :next [iterate f [f v]]
)

empty-set = ()

-- set-from-list : list a -> set a
set-from-list = [fold \v s -> [give v true s] empty-set]

set-contains? v set = [default-take v set false]

set-insert v set = [give v true set]

array-from-list-aux n list = [
  if [empty? list]
    ()
    [give n [:head list] [array-from-list-aux [inc n] [:tail list]]]
]

array-from-list = [array-from-list-aux 0]

apply fn v = [fn v]

map f xs = [
  if [empty? xs]
    nil
    [cons [f [take :head xs]] [map f [take :tail xs]]]
]

filter p? xs = [
  if [empty? xs]
    nil
    let
      first = [take :head xs]
      rest = [take :tail xs]
    in [if [p? first]
         [cons first [filter p? rest]]
         [filter p? rest]]
]

io = __prim_io_map
